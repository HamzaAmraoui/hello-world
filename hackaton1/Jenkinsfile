pipeline {
    agent none  // Usamos agentes ef√≠meros en Kubernetes

    stages {
        stage('Build') {
            agent { kubernetes { yaml podYAML() } }
            steps {
                container('kubectl') {
                    echo "üîß Building the application..."
                }
            }
        }
        
        stage('Test') {
            agent { kubernetes { yaml podYAML() } }
            steps {
                container('kubectl') {
                    echo "üß™ Running tests..."
                }
            }
        }

        stage('Docker Build & Push') {
            agent { kubernetes { yaml podYAML() } }
            environment {
                DOCKER_REGISTRY = "docker.io"
                IMAGE_NAME = "khalifi11/hello-k8s"
                IMAGE_TAG = "latest"
            }
            steps {
                container('docker') {  // Asegura que los comandos Docker se ejecuten en el contenedor correcto
                    echo "üê≥ Building and pushing Docker image..."
                    sh '''
                        docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
                        docker push $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Deploy to K8s') {
            agent { kubernetes { yaml podYAML() } }
            steps {
                container('kubectl') {
                    echo "üöÄ Deploying application to Kubernetes..."
                    sh '''
                        kubectl apply -f https://raw.githubusercontent.com/cloudogu/hello-k8s/main/k8s.yaml
                        kubectl rollout status deployment/hello-k8s
                    '''
                }
            }
        }
    }
}

// üõ†Ô∏è Definimos la plantilla del pod con los contenedores necesarios
def podYAML() {
    return """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: kubectl
      image: bitnami/kubectl
      command:
        - cat
      tty: true

    - name: docker
      image: docker:24-dind  # Imagen con Docker Daemon
      securityContext:
        privileged: true  # Necesario para ejecutar Docker dentro de Kubernetes
      command:
        - "dockerd"
      tty: true
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket

  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
"""
}
